<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Myteka.Infrastructure</name>
    </assembly>
    <members>
        <member name="M:Myteka.Infrastructure.Controllers.AuthorController.GetAllAuthorBooks(System.Guid)">
            <summary>
            Returns all the author's books
            </summary>
            <param name="authorId">Author id</param>
            <returns>All books by the author</returns>
            <response code="200">Returns all the books by the author</response>
            <response code="404">Author not found</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.AuthorController.GetAllAuthors">
            <summary>
            Returns all authors
            </summary>
            <returns>All authors</returns>
            <response code="200">Returns all authors</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.AuthorController.GetAllAuthors(System.Int32)">
            <summary>
            Returns all authors but with a limited number 
            </summary>
            <returns>Authors</returns>
            <response code="200">Returns all authors</response>
            <response code="400">Invalid request</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.AuthorController.AddBook(System.Guid,System.Guid)">
            <summary>
            Adds a new book to the author's book list
            </summary>
            <param name="authorId">author's id</param>
            <param name="bookId">book's id</param>
            <response code="200">Book added to the author's book list</response>
            <response code="404">Author not found</response>
            <response code="404">Book not found</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.AuthorController.Get(System.Guid)">
            <summary>
            Returns the author by his id
            </summary>
            <param name="authorId">author's id</param>
            <returns>Requested author</returns>
            <response code="200">Returns the author by his id</response>
            <response code="404">Author not found</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.AuthorController.Create(Myteka.Models.ExternalModels.AuthorExternal)">
            <summary>
            Creates a new author and saves it in the database
            </summary>
            <param name="author">New author</param>
            <response code="200">Author created</response>
            <response code="400">Invalid request</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.AuthorController.GetAuthorTags(System.Guid)">
            <summary>
            Returns the author's tags
            </summary>
            <param name="authorId">author's id</param>
            <returns>Tags assigned to the author</returns>
            <response code="200">Returns the author's tags</response>
            <response code="404">Author not found</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.AuthorController.Remove(System.Guid)">
            <summary>
            Removes a specific author from the database
            </summary>
            <param name="authorId">author's id</param>
            <response code="200">Author removed</response>
            <response code="404">Author not found</response>
            <response code="403">No rights to delete</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.BookController.GetBookByTheme(System.String)">
            <summary>
            Returns books by topic
            </summary>
            <param name="theme">Theme</param>
            <returns>A list of books suitable for the request</returns>
            <response code="200">Returns a list of books</response>
            <response code="403">If the request is invalid</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.BookController.GetBookById(System.Guid)">
            <summary>
            Returns the book by id
            </summary>
            <param name="id">Book id</param>
            <returns>The book with the requested id</returns>
            <response code="200">Returns the book</response>
            <response code="404">There is no such book</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.BookController.GetAllBooks">
            <summary>
            Returns all books
            </summary>
            <response code="200">Returns a list of books</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.BookController.CreateBook(Myteka.Models.ExternalModels.BookRegisterModel)">
            <summary>
            Creates a book and writes it to the database
            </summary>
            <param name="book">The book being created</param>
            <returns></returns>
            <response code="200">The book has been added successfully</response>
            <response code="400">If the request is invalid</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.BookController.DeleteBook(System.Guid)">
            <summary>
            Deletes a book by id
            </summary>
            <param name="id">Id of the book to be deleted</param>
            <response code="200">The book has been deleted successfully</response>
            <response code="400">There is no such book</response>
            <response code="403">No rights to delete</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.ContentController.UploadBook(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Upload book to server
            </summary>
            <param name="file"></param>
            <returns>Returns the id of the book that has just been downloaded</returns>
            <response code="200">Book uploaded successfully</response>
            <response code="400">Book already exists</response>
        </member>
        <member name="M:Myteka.Infrastructure.Controllers.ContentController.BindBook(System.Guid,System.Guid)">
            <summary>
            Bind book to content metadata
            </summary>
            <param name="bookId"></param>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="T:Myteka.Infrastructure.Migrations.Init">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Myteka.Infrastructure.Migrations.Init2">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init2.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init2.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init2.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Myteka.Infrastructure.Migrations.Init3">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init3.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init3.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init3.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Myteka.Infrastructure.Migrations.Init4">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init4.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init4.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init4.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Myteka.Infrastructure.Migrations.Init5">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init5.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init5.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.Init5.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Myteka.Infrastructure.Migrations.BookTest1">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.BookTest1.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.BookTest1.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.BookTest1.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Myteka.Infrastructure.Migrations.BookTest2">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.BookTest2.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.BookTest2.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Migrations.BookTest2.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Myteka.Infrastructure.Data.Implementations.AuthorRepository.AddBook(System.Guid,System.Guid)">
            <summary>
            Adds a book to the author's book list
            </summary>
            <exception cref="T:Myteka.Infrastructure.Exceptions.NotFoundException">Occurs if the book or author is not found</exception>
        </member>
        <member name="M:Myteka.Infrastructure.Data.Implementations.ContentRepository.DownloadFile(System.Guid)">
            <summary>
            Returns an object as an array of bytes
            </summary>
            <param name="fileId">id of the object being searched for</param>
            <exception cref="T:System.Exception">Occurs if the object is not in the database</exception>
            <exception cref="T:Myteka.Infrastructure.Exceptions.GuidNotValidException">Occurs if the requested object does not exist</exception>
        </member>
        <member name="M:Myteka.Infrastructure.Data.Implementations.ContentRepository.GetContentUrl(System.Guid)">
            <exception cref="T:System.Exception">Occurs if the url is not in the database</exception>
            <exception cref="T:Myteka.Infrastructure.Exceptions.GuidNotValidException">Occurs if the requested object does not exist</exception>
        </member>
        <member name="M:Myteka.Infrastructure.Data.Implementations.ContentRepository.GetMetadata(System.Guid)">
            <exception cref="T:Myteka.Infrastructure.Exceptions.GuidNotValidException">Occurs if the requested object does not exist</exception>
        </member>
        <member name="M:Myteka.Infrastructure.Data.Implementations.ContentRepository.UpdateMetadata(System.Guid,Myteka.Models.InternalModels.ContentMetadata)">
            <summary>
            Updates the metadata of the object
            </summary>
            <exception cref="T:Myteka.Infrastructure.Exceptions.GuidNotValidException">Occurs if the requested object does not exist</exception>
        </member>
        <member name="T:Myteka.Infrastructure.Exceptions.GuidNotValidException">
            <summary>
            Occurs in the absence of the desired result
            </summary>
        </member>
    </members>
</doc>
